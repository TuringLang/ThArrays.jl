var documenterSearchIndex = {"docs":
[{"location":"ad/#","page":"AD","title":"AD","text":"<!– # ( -- mode: markdown; mode: auto-fill -- ) –>","category":"page"},{"location":"ad/#Auto-Differentiation-1","page":"AD","title":"Auto Differentiation","text":"","category":"section"},{"location":"ad/#ThArrays.AD-1","page":"AD","title":"ThArrays.AD","text":"","category":"section"},{"location":"ad/#ThArrays.TrackerAD-1","page":"AD","title":"ThArrays.TrackerAD","text":"","category":"section"},{"location":"torchscript/#","page":"TorchScript","title":"TorchScript","text":"<!– # ( -- mode: markdown; mode: auto-fill -- ) –>","category":"page"},{"location":"torchscript/#TorchScript-Support:-ThArrays.ThJIT-1","page":"TorchScript","title":"TorchScript Support: ThArrays.ThJIT","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"<!– # ( -- mode: markdown; mode: auto-fill -- ) –>","category":"page"},{"location":"reference/#API-Reference-1","page":"Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"This page provides a comprehensive reference for ThArrays functionality.","category":"page"},{"location":"reference/#Tensor-1","page":"Reference","title":"Tensor","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"ThArrays.Tensor","category":"page"},{"location":"tensor/#","page":"Tensor","title":"Tensor","text":"<!– # ( -- mode: markdown; mode: auto-fill -- ) –>","category":"page"},{"location":"tensor/#Tensor-1","page":"Tensor","title":"Tensor","text":"","category":"section"},{"location":"tensor/#Tensor-2","page":"Tensor","title":"Tensor","text":"","category":"section"},{"location":"tensor/#Tensor-on-GPU-1","page":"Tensor","title":"Tensor on GPU","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"<!– # ( -- mode: markdown; mode: auto-fill -- ) –>","category":"page"},{"location":"#ThArrays-1","page":"Home","title":"ThArrays","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"ThArrays is a Julia interface for the PyTorch's C++ backend. It aims on bringing the fundamental facilities, e.g., Tensor, AutoGrad, TorchScript, etc., to the Julia ecosystem.","category":"page"},{"location":"#Getting-Started-1","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Install the package by ] add Tharrays, or if you cloned the code repository and intend to build it from source, set the environment variable export THARRAYS_DEV=1 and run ] build ThArrays. The build script will download the libtorch zip file, compile the shared library, and generate many Julia methods in module ThArrays.ThC. Without setting THARRAYS_DEV, the build script will download the pre-built binary library instead of building it locally.\nRun a simple example:\n julia> using ThArrays\n\n julia> t = Tensor( -rand(3, 3) )\n PyTorch.Tensor{Float64, 2}:\n -0.1428 -0.7099 -0.1446\n -0.3447 -0.0686 -0.8287\n -0.2692 -0.0501 -0.2092\n [ CPUDoubleType{3,3} ]\n\n julia> abs(t)\n PyTorch.Tensor{Float64, 2}:\n  0.1428  0.7099  0.1446\n  0.3447  0.0686  0.8287\n  0.2692  0.0501  0.2092\n [ CPUDoubleType{3,3} ]\n\n julia> sin(t)^2 + cos(t)^2\n PyTorch.Tensor{Float64, 2}:\n  1.0000  1.0000  1.0000\n  1.0000  1.0000  1.0000\n  1.0000  1.0000  1.0000\n [ CPUDoubleType{3,3} ]\n\n julia> t\n PyTorch.Tensor{Float64, 2}:\n -0.1428 -0.7099 -0.1446\n -0.3447 -0.0686 -0.8287\n -0.2692 -0.0501 -0.2092\n [ CPUDoubleType{3,3} ]\n\n julia> ThC.abs!(t)\n PyTorch.Tensor{Float64, 2}:\n  0.1428  0.7099  0.1446\n  0.3447  0.0686  0.8287\n  0.2692  0.0501  0.2092\n [ CPUDoubleType{3,3} ]\n\n julia> t\n PyTorch.Tensor{Float64, 2}:\n  0.1428  0.7099  0.1446\n  0.3447  0.0686  0.8287\n  0.2692  0.0501  0.2092\n [ CPUDoubleType{3,3} ]\n\n julia> ThAD.gradient(x->sum(sin(x)+x^2), rand(3,3))\n (PyTorch.Tensor{Float64, 2}:\n  2.3776  1.5465  2.0206\n  1.2542  1.2081  2.1156\n  2.1034  1.1568  2.2599\n [ CPUDoubleType{3,3} ]\n ,)\n\n julia>\n\nRead on the documents to learn more about ThArrays.","category":"page"},{"location":"#Features-1","page":"Home","title":"Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"ThArrays provides:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"ThArrays.Tensor: PyTorch Tensor as an Array-like data type in  Julia\nThArrays.ThAD: AD using PyTorch C++ backend\nThArrays.TrackerAD: AD using Tracker.jl and PyTorch C++  backend mixed, on your choice\nThArrays.ThJIT: using TorchScript in Julia","category":"page"},{"location":"#The-shared-library-1","page":"Home","title":"The shared library","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"We wrap libtorch to a shared library (libtorch_capi) to expose symbols that can be called by Julia's ccall directly. That shared library depends on nothing but the libtorch C++ library, that is, it does NOT depend on Julia either, so every language or platform who has an FFI facility like Juiia's ccall can use it to wrap a PyTorch library.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The files csrc/torch_capi* are maintianed by this project and they are used to provide consturctors and several crucial functions of the Tensor and Scalar types.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The files csrc/torch_api* are copied from project ocaml-torch (the src/wrapper directory) with a few minor modifications (remove ocaml dependency, add a generic error handling approach, etc.).","category":"page"},{"location":"#The-auto-generated-ThArrays.ThC-module-1","page":"Home","title":"The auto-generated ThArrays.ThC module","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"As we said in the last section, we borrowed some C++ sources from the ocaml-torch project, and these files are auto-generated (by a program in the ocaml-torch project and based on the YAML declaration files, for example the file native_functions.yaml, in the PyTorch project).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In this project, we use a Julia program, src/thc/thc-generator.jl to generate Julia functions who call the auto-generated C/C++ functions via ccall, and put them into module ThArrays.ThC (src/thc/thc.jl).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Beside the functions in ThArrays.ThC module, we can find the Python API of type Tensor here, and extract a list by running:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"cat tensors.html | perl -n -e 'print \"$1\\n\" if (m{<code class=\"sig-name descname\">(.+)</code>.*x2192; Tensor}i);' | uniq","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The result of this command is saved as python-api-tensor.txt under this directory, if you found any convenient API in it but not in this package, tell us and we can add it in.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Another place to find functions on Tensor is the C++ API document.","category":"page"},{"location":"#Build-with-CUDA-support-1","page":"Home","title":"Build with CUDA support","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"By default, if you install this package using Julia's package manager(Pkg), it only supports Tensor on CPU. But it also supports Tensors on CUDA GPU if you:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"have CUDA installed on your machine\ndownload libtorch with CUDA support and unzip it to the csrc/libtorch directory of this package\nexport THARRAYS_DEV=1\nstart Julia, run ] build ThArrays","category":"page"}]
}
